
#!/usr/bin/env node

/**
 * SCRIPT CHU·∫®N B·ªä DEPLOY L√äN RENDER
 * T·ª± ƒë·ªông c·∫•u h√¨nh t·∫•t c·∫£ file c·∫ßn thi·∫øt cho deployment
 */

const fs = require('fs');
const path = require('path');

function createRenderFiles() {
  console.log('üîÑ T·∫°o files c·∫•u h√¨nh cho Render...');

  // 1. T·∫°o start script cho production
  const startScript = `#!/bin/bash
echo "üöÄ Starting Long Quan Business Management System..."
echo "üìç Environment: $NODE_ENV"
echo "üîó Database URL configured: $(echo $DATABASE_URL | cut -c1-30)..."

# Run database migration first
echo "üîÑ Running database migration..."
node migrate-production.js

# Start the application
echo "üåü Starting server..."
npm start
`;

  fs.writeFileSync('start-render.sh', startScript);
  console.log('‚úÖ Created start-render.sh');

  // 2. C·∫≠p nh·∫≠t package.json cho Render
  const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  packageJson.engines = {
    "node": ">=18.0.0",
    "npm": ">=8.0.0"
  };
  packageJson.scripts = {
    ...packageJson.scripts,
    "render:build": "npm install && npm run build",
    "render:start": "chmod +x start-render.sh && ./start-render.sh"
  };

  fs.writeFileSync('package.json', JSON.stringify(packageJson, null, 2));
  console.log('‚úÖ Updated package.json');

  // 3. T·∫°o render.yaml
  const renderConfig = `services:
  - type: web
    name: long-quan-business-management
    env: node
    plan: free
    buildCommand: npm run render:build
    startCommand: npm run render:start
    healthCheckPath: /api/health
    envVars:
      - key: NODE_ENV
        value: production
      - key: DATABASE_URL
        fromDatabase:
          name: long-quan-db
          property: connectionString

databases:
  - name: long-quan-db
    databaseName: long_quan_business
    user: long_quan_user
    plan: free
`;

  fs.writeFileSync('render.yaml', renderConfig);
  console.log('‚úÖ Created render.yaml');

  console.log('üéâ Files chu·∫©n b·ªã xong! B√¢y gi·ªù push l√™n GitHub...');
}

createRenderFiles();
